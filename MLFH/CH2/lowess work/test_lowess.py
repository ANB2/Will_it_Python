'''
Lowess testing suite.

Expected outcomes are generate by R's lowess function given the same
arguments. The R script test_lowess_r_outputs.R can be used to 
generate the expected outcomes.

The delta tests utilize Silverman's motorcycle collision data,
available in R's MASS package. 
'''

import numpy as np
from numpy.testing import assert_almost_equal

#import statsmodels.api as sm
#from statsmodels.nonparametric.lowess import lowess


import cylowess
lowess = cylowess.lowess
# Number of decimals to test equality with. 
# The default is 7.
testdec = 7

class  TestLowess(object):
     
    def test_simple(self):
        
        x = np.arange(20, dtype=np.double)
        #standard normal noise
        noise = np.array([-0.76741118, -0.30754369,  
                            0.39950921, -0.46352422, -1.67081778,
                            0.6595567 ,  0.66367639, -2.04388585,  
                            0.8123281 ,  1.45977518,
                            1.21428038,  1.29296866,  0.78028477, 
                            -0.2402853 , -0.21721302,
                            0.24549405,  0.25987014, -0.90709034, 
                            -1.45688216, -0.31780505])        
        y = x + noise

        # R output
        out = [-0.6260344553, 0.565071712, 1.759627189, 
                2.9579633258, 4.1560636154, 5.3473396937, 
                6.522298218, 7.708159388, 8.8759055519, 
                9.9409758603, 10.8981138458, 11.7851424728, 
                12.6188717297, 13.4098497374, 14.1516996585, 
                14.9180658147, 15.6956600199, 16.4783034134, 
                17.2617441531, 18.0459201716]

        expected_lowess = np.array([x, out]).T

        actual_lowess = lowess(y, x)

        assert_almost_equal(expected_lowess, actual_lowess, decimal = testdec)

    def test_iter(self):

        x = np.arange(20, dtype=np.double)
        #cauchy noise
        noise = np.array([ 1.86299605, -0.10816866,  1.87761229, 
                        -3.63442237,  0.30249022,
                        1.03560416,  0.21163349,  1.14167809, 
                        -0.00368175, -2.08808987,
                        0.13065417, -1.8052207 ,  0.60404596, 
                        -2.30908204,  1.7081412 ,
                        -0.54633243, -0.93107948,  1.79023999,  
                        1.05822445, -1.04530564])
        
        y = x + noise

        # R output
        out = [0.6264479483, 1.5008396363, 2.3861761926, 3.2716390242, 
               4.1397266375, 4.9926614002, 5.9062225, 6.8541464784, 
               7.8163358136, 8.6684661827, 9.5321215273, 10.4655376106, 
               11.469691774, 12.612670578, 13.8080457514, 14.9355218409, 
               16.0491183613, 17.1604998952, 18.2739171976, 19.3834268539]


        expected_lowess_no_iter = np.array([x, out]).T
        
        out = [1.1091939965, 1.9662338415, 2.8223436958, 3.6741660675, 
               4.5153163696, 5.3483205165, 6.2127611584, 7.0371035909, 
               7.8823844068, 8.7036783127, 9.5698728732, 10.5011237563, 
               11.4924301926, 12.6180333554, 13.8056705213, 14.9280791108, 
               16.0363681325, 17.1426206341, 18.2516511313, 19.3581200948]

        expected_lowess_3_iter = np.array([x, out]).T
                                            
        actual_lowess_no_iter = lowess(y, x, it = 0)
        actual_lowess_3_iter = lowess(y, x, it = 3)

        assert_almost_equal(expected_lowess_no_iter, actual_lowess_no_iter, decimal = testdec)
        assert_almost_equal(expected_lowess_3_iter, actual_lowess_3_iter, decimal = testdec)

    def test_frac(self):
        
        #linspace from -2*pi to 2*pi with 30 points
        x = np.array([-6.28318531, -5.84986218, 
                      -5.41653906, -4.98321593, -4.54989281,
                      -4.11656968, -3.68324656, -3.24992343, 
                      -2.81660031, -2.38327719,
                      -1.94995406, -1.51663094, -1.08330781, 
                      -0.64998469, -0.21666156,
                      0.21666156,  0.64998469,  1.08330781,  
                      1.51663094,  1.94995406,
                      2.38327719,  2.81660031,  3.24992343,  
                      3.68324656,  4.11656968,
                      4.54989281,  4.98321593,  5.41653906,  
                      5.84986218,  6.28318531],
                      dtype=np.double)
        
        #normal noise
        noise = np.array([1.62379338, -1.11849371,  1.60085673,  
                          0.41996348,  0.70896754,
                          0.19271408,  0.04972776, -0.22411356,  
                          0.18154882, -0.63651971,
                          0.64942414, -2.26509826,  0.80018964,  
                          0.89826857, -0.09136105,
                          0.80482898,  1.54504686, -1.23734643, 
                          -1.16572754,  0.28027691,
                          -0.85191583,  0.20417445,  0.61034806, 
                          0.68297375,  1.45707167,
                          0.45157072, -1.13669622, -0.08552254, 
                          -0.28368514, -0.17326155])
        
        y = np.sin(x) + noise
        
        out = [1.8046611448, 1.6131161806, 1.4261750243, 1.2456232437, 
               1.0726525743, 0.9078886862, 0.7508382846, 0.5995025425, 
               0.4498245781, 0.2967048843, 0.2087946661, 0.140876587, 
               0.0962675821, 0.0786932125, 0.0909461638, 0.1283179371, 
               0.1792307713, 0.2229799061, 0.2420129212, 0.2271040447, 
               0.1825971814, 0.0922474353, 0.00966894, -0.0694426067, 
               -0.1487375865, -0.2304165138, -0.3160020917, -0.4060221341, 
               -0.5000353633, -0.5970108165]

        expected_lowess_23 = np.array([x, out]).T

        out = [1.7442204356, 1.780854241, 1.8244230184, 1.7748683429, 
               1.3903143795, 1.000014232, 0.5485738577, 0.0610231515, 
               -0.3171727715, -0.486231173, -0.4514649389, -0.2481318403, 
               -0.0237961837, 0.1049980654, 0.3973354411, 0.3637284562, 
               0.2334379481, 0.0891119258, -0.0380804274, 0.1144301171, 
               0.3015145173, 0.3382750669, 0.3708704952, 0.2975254453, 
               -0.0025753083, -0.3315491452, -0.604601953, -0.7476857901, 
               -0.5589514161, -0.3081313621]
 
        expected_lowess_15 = np.array([x, out]).T

        actual_lowess_23 = lowess(y,x,frac=2./3)
        actual_lowess_15 = lowess(y,x,frac=1./5)

        assert_almost_equal(expected_lowess_23, actual_lowess_23, decimal = testdec)
        assert_almost_equal(expected_lowess_15, actual_lowess_15, decimal = testdec)

    def test_delta(self):

        # Silverman motorcycle collision data. From R's MASS package.
        x = [2.4, 2.6, 3.2, 3.6, 4, 6.2, 6.6, 6.8, 7.8, 8.2, 8.8, 
             8.8, 9.6, 10, 10.2, 10.6, 11, 11.4, 13.2, 13.6, 13.8, 
             14.6, 14.6, 14.6, 14.6, 14.6, 14.6, 14.8, 15.4, 15.4, 
             15.4, 15.4, 15.6, 15.6, 15.8, 15.8, 16, 16, 16.2, 16.2, 
             16.2, 16.4, 16.4, 16.6, 16.8, 16.8, 16.8, 17.6, 17.6, 17.6, 
             17.6, 17.8, 17.8, 18.6, 18.6, 19.2, 19.4, 19.4, 19.6, 20.2, 
             20.4, 21.2, 21.4, 21.8, 22, 23.2, 23.4, 24, 24.2, 24.2, 
             24.6, 25, 25, 25.4, 25.4, 25.6, 26, 26.2, 26.2, 26.4, 27, 
             27.2, 27.2, 27.2, 27.6, 28.2, 28.4, 28.4, 28.6, 29.4, 30.2, 
             31, 31.2, 32, 32, 32.8, 33.4, 33.8, 34.4, 34.8, 35.2, 35.2, 
             35.4, 35.6, 35.6, 36.2, 36.2, 38, 38, 39.2, 39.4, 40, 40.4, 
             41.6, 41.6, 42.4, 42.8, 42.8, 43, 44, 44.4, 45, 46.6, 47.8, 
             47.8, 48.8, 50.6, 52, 53.2, 55, 55, 55.4, 57.6]

        y = [0, -1.3, -2.7, 0, -2.7, -2.7, -2.7, -1.3, 
             -2.7, -2.7, -1.3, -2.7, -2.7, -2.7, -5.4, 
             -2.7, -5.4, 0, -2.7, -2.7, 0, -13.3, -5.4, 
             -5.4, -9.3, -16, -22.8, -2.7, -22.8, -32.1, 
             -53.5, -54.9, -40.2, -21.5, -21.5, -50.8, -42.9, 
             -26.8, -21.5, -50.8, -61.7, -5.4, -80.4, -59, -71, 
             -91.1, -77.7, -37.5, -85.6, -123.1, -101.9, -99.1, 
             -104.4, -112.5, -50.8, -123.1, -85.6, -72.3, -127.2, 
             -123.1, -117.9, -134, -101.9, -108.4, -123.1, -123.1, 
             -128.5, -112.5, -95.1, -81.8, -53.5, -64.4, -57.6, 
             -72.3, -44.3, -26.8, -5.4, -107.1, -21.5, -65.6, -16, 
             -45.6, -24.2, 9.5, 4, 12, -21.5, 37.5, 46.9, -17.4, 36.2,
             75, 8.1, 54.9, 48.2, 46.9, 16, 45.6, 1.3, 75, -16, -54.9, 
             69.6, 34.8, 32.1, -37.5, 22.8, 46.9, 10.7, 5.4, -1.3, 
             -21.5, -13.3, 30.8, -10.7, 29.4, 0, -10.7, 14.7, -1.3, 0, 
             10.7, 10.7, -26.8, -14.7, -13.3, 0, 10.7, -14.7, -2.7, 10.7, 
             -2.7, 10.7]

        x = np.array(x, dtype = np.double)
        y = np.array(y, dtype = np.double)

        #Delta = 0
        out = [-1.0552791131, -1.1219154621, -1.316081059,
            -1.4422862264, -1.5662283306, -2.2053525616, -2.3096035319,
            -2.3408548923, -2.4282990725, -2.500886005, -2.6276328265,
            -2.6276328265, -2.8910631841, -2.9494088422, -2.9647435785,
            -2.9880031097, -2.914898613, -2.7869325851, -1.4481559833,
            -3.0873271516, -4.4791590521, -10.8068835804, -10.8068835804,
            -10.8068835804, -10.8068835804, -10.8068835804,
            -10.8068835804, -16.4802488804, -35.0448040796,
            -35.0448040796, -35.0448040796, -35.0448040796,
            -36.2024699857, -36.2024699857, -34.2946110367,
            -34.2946110367, -40.9623781611, -40.9623781611,
            -49.8894820127, -49.8894820127, -49.8894820127,
            -59.1575903657, -59.1575903657, -69.2618040411,
            -78.3672548349, -78.3672548349, -78.3672548349, -99.062626935,
            -99.062626935, -99.062626935, -99.062626935, -102.2391307654,
            -102.2391307654, -105.6528903557, -105.6528903557,
            -109.2871415044, -110.8603162999, -110.8603162999,
            -112.4530884942, -114.3011121712, -114.6495574762,
            -117.0768592046, -117.7837920102, -118.5726679549,
            -118.1232750623, -110.4625904347, -112.2452204211,
            -98.6622216658, -91.0193902328, -91.0193902328,
            -75.5437345924, -59.3264242523, -59.3264242523,
            -45.3652057886, -45.3652057886, -39.9193022836,
            -29.4898561808, -26.7335833652, -26.7335833652,
            -24.7308823089, -17.3461923374, -13.9877368357,
            -13.9877368357, -13.9877368357, -3.815449293, 10.0630237568,
            11.8459033195, 11.8459033195, 13.7410371927, 23.9840770225,
            30.604336258, 37.1924898621, 38.4974329392, 40.2184164285,
            40.2184164285, 38.4881342224, 32.0477724, 30.2792667307,
            28.176330253, 27.868633155, 27.2079004831, 27.2079004831,
            27.1338969774, 27.3449931414, 27.3449931414, 26.7215917837,
            26.7215917837, 16.093306892, 16.093306892, 4.448178977,
            2.7312884756, 2.0724405389, 0.7875296665, 0.3138829722,
            0.3138829722, 2.8016666088, 3.4130881492, 3.4130881492,
            3.9173103327, 4.8254741049, 4.3557567861, 2.350947087,
            -5.3545933206, -6.1859851659, -6.1859851659, -5.6040311591,
            -5.4268004561, -3.4342985728, -1.0634843171, 2.4007825781,
            2.4007825781, 3.1498821641, 7.232080186]
        
        expected_lowess_del0 = np.array([x, out]).T

        # Delta at R default (= 0.01 * range(x))
        out = [-1.055279054, -1.1219153861, -1.3160809286,
            -1.442286057, -1.5662281161, -2.2053517538, -2.3096028101,
            -2.3408542359, -2.4282991587, -2.5008866818, -2.627634001,
            -2.627634001, -2.8910646202, -2.9494097141, -2.9647440729,
            -2.9880028542, -2.9148971157, -2.7869282216, -1.4481631023,
            -3.087375408, -4.4792258287, -10.8066936421, -10.8066936421,
            -10.8066936421, -10.8066936421, -10.8066936421,
            -10.8066936421, -16.47802293, -34.987444517, -34.987444517,
            -34.987444517, -34.987444517, -34.6266687507, -34.6266687507,
            -34.2658929845, -34.2658929845, -42.2168368598,
            -42.2168368598, -50.1677807351, -50.1677807351,
            -50.1677807351, -59.7887394694, -59.7887394694,
            -69.4096982036, -78.3786544205, -78.3786544205,
            -78.3786544205, -99.068563862, -99.068563862, -99.068563862,
            -99.068563862, -102.2368001878, -102.2368001878,
            -105.6367149403, -105.6367149403, -109.2600510156,
            -110.8470846223, -110.8470846223, -112.4341182291,
            -114.2887417766, -114.639002103, -117.0740786531,
            -117.7822369843, -118.5727414897, -118.1236171571,
            -110.462791016, -112.2464945021, -98.6598772073,
            -91.0153647609, -91.0153647609, -75.5363085812,
            -59.3082711941, -59.3082711941, -45.3214933809,
            -45.3214933809, -39.853467579, -29.3822440526, -27.0200668442,
            -27.0200668442, -24.6578896358, -17.2960223519,
            -13.9480365878, -13.9480365878, -13.9480365878, -3.6765407467,
            10.4292037083, 12.2458133097, 12.2458133097, 14.0624229111,
            24.2444925516, 30.7927655869, 37.2590800937, 38.5529243859,
            40.2323117875, 40.2323117875, 38.4812312204, 32.0422229921,
            30.2882445698, 28.1869576449, 27.8855044159, 27.2331604231,
            27.2331604231, 27.308157418, 27.3831544129, 27.3831544129,
            26.7559570747, 26.7559570747, 16.1088030694, 16.1088030694,
            4.4578532855, 2.7401784537, 2.080822493, 0.7938169636,
            0.3191185272, 0.3191185272, 2.8094175412, 3.4195552287,
            3.4195552287, 3.9231814988, 4.8275850007, 4.3570464019,
            2.3510396138, -5.3556770197, -6.1875642926, -6.1875642926,
            -5.6051637343, -5.4274655608, -3.4347228002, -1.0637355151,
            2.4007351689, 2.4007351689, 3.1498733994, 7.2322447987]


        expected_lowess_delRdef = np.array([x, out]).T

        actual_lowess_del0 = lowess(y, x, frac = 0.1)
        actual_lowess_delRdef = lowess(y, x, frac = 0.1, delta = 0.01 * np.ptp(x))
        
        assert_almost_equal(expected_lowess_del0, actual_lowess_del0, decimal = testdec)
        assert_almost_equal(expected_lowess_delRdef, actual_lowess_delRdef, decimal = testdec)
        

if __name__ == "__main__":
    import nose
    nose.runmodule(argv=[__file__, '-vvs', '-x', '--pdb', '--noexe'], exit=False)

